Blogs Galore!!!
-------------------

This blog has gone through more implementation overhauls than there are actual blog posts, as of writing this.  As I mentioned in my first blog post here, I'm developing this website mainly for the experience of it, so that's lead me to try to write most of the stuff from scratch and I've toyed with the idea of sharing me experiences doing that.  Since I feel like that having a blog with more implementations than posts is some manner of accomplishment (or probably more of a failure, but whatever), I'm going to indulge in some self delusion and pretend that someone would want to hear about it.  Shall we get started:

###Blog Implementation #1: The First Try###

Writing a blog with a SQL DB sounded far too tedious to get going, keep maintained, and post to to me, so I decided I needed something more straight forward.  So, I decided the best solution was to simply have a directory full of XML files that contained the blog data.  Step 1 to get this going was to first read the contents of the directory that stored the blogs, and leaving out the listings for the current directory, the parent directory, and the "You asked for a blog I've never heard of before" entry.  Since the naming convention of my files had both the blog title and the date, I then ran some regex on the remaining valid entries to pull those.  The next step was to actually display a  blog list.  To do that, I simply dropped the values I regexed into a list of links to those blogs with the title and the date.  There's no user input at this point so I don't have to worry about having to validate anything suspicious yet.  Now, I needed people to actually be able to read a blog.  I didn't like the idea of having PHP simply read a file based on user input since that leads one down the path of destruction...or just a path traversal vulnerability. Even though that might have made for an interesting exercise to try to put some defenses up for that, I like JS more than PHP, so I simply decided to make an XHR request out to the file, since they were public anyways.  That returned an XML page for me, that I then had JS pull out all the delicious data to display.  Now, to know which blog to display, I had a blog parameter up in the query string.  For some reason that I can't explain anymore (probably because it was more straight forward), I decided to grab the value of the blog parameter via PHP instead of JS and have the PHP drop the value in the appropriate place in the JS.  Now, this opened me up to a potential XSS vulnerability, as user input was being placed in the middle of this JS string:

>    xmlhttp.open("GET","./Blog/USER_INPUT_HERE.xml",false);

From my experience XSSing sites myself, I knew that to do something sneaky, an attacker would likely try to break out of the script area with a </script> or get out of the string with a ".  Rather than attempting to encode these things, I knew legitimate input would never have the special characters involved in these, so if I saw an < or a ", I simply dropped the user input and replaced it with
>   ",false);window.location="./InternetInquisition.html";//

I'd like to say I was just trying to be clever, but having learned to code mainly through XSS, injecting JS to redirect the attacker probably seemed like the most straight forward thing to do to me.  Anyhoo, this is getting long winded so let's move on to...

### Blog Implementation #2: The SeQuaL

Writing a blog with a SQL DB sounded like it would be a good experience to get going, keep maintained, and post to to me, and having the last method required us to tediously update the whole prod site to post a blog so I decided to set up a SQL DB.  This was a pretty by the books set up of a PHP/SQL DB, so if you read any tutorial about doing that, you'll get a good idea of what I did.  The most exciting thing here was that I now had SQL injection to deal with.  It is at this point I must make a confession:  I didn't parameterize my queries. I know, I know, I committed a terrible crime against info sec.  Instead, I knew all my user input was going to be grabbing the blog ID, so I decided to write a regex to match on anything that was entirely numbers, and if it wasn't that, redirect them back to the Internet Inquisition.  

### Blog Implementation #3: Then Things Got Pointy...

By this point I had been introduced to Angular.js and had just developed an internal app at work that used it.  I really like JS, so I decided to turn JenJin Studios into a SPA ("single page app") using it.  Unfortunately, all this dynamic JS awesomeness broke my "old" blog setup, and getting PHP and Angular to play nice was a bit less straight forward than I imagined.  After doing some reading on the internet, I decided the best path to take was to create a custom blog API.  Rather than have PHP drop the blog content on the page straight from the DB, I instead decided to have a special page that served as an API and have PHP simply drop all the relevant blog data as a blob of JSON.  That way, I could have Angular simple call out to my blog API page, get the JSON data, and then put it where it needed to go on the page.  Worked out great for me.  In case you've been to this site before now, you may have noticed that weeks/months passed since a blog had been posted.  Well, it turns out...

### Blog Implementation #4: Just Going and Gitting it
...writing a blog with a SQL DB was far too tedious to keep maintained and post blogs to, so I decided I needed something more straight forward.  About this time I was reading another blog that I've forgotten what was now that simply had all the blog posts as a repo in GitHub.  I had already played with GitHub API to grab the updates to the JenJin framework, so why couldn't I just use that to grab blog posts?  It turns out there was no reason I couldn't don't, so guess what I'm doing now!  Unfortunately, I have no control the fields that GitHub sends back in the API, so I couldn't load up the date and author on the blog list, but then an idea hit me.  I started writing this blog post, and it occurred to me, why don't I implement some naming convention with this data, and then regex it out like I did in implementation #1?  And thus things come full circle. 

When I hit a point in a blog post wherein I start referencing that same blog post, I know I've hit the point wherein I need to stop.  I hope this was mildly bemusing/insightful for someone out there as much as it was for me apparently.

-Garrett
